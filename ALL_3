package traverseThisTown;
import java.util.*;
import java.util.Stack;

//class Node and Graph taken from the repl as a baseline
class Node {
	  public String data;
	  public List<Node> neighbors;
	  private boolean visited;

	  public Node(String data) {
	    this.data = data;
	    this.neighbors = new ArrayList<>();
	    this.visited = false;
	  }

	  public void setVisited() {
	    visited = true;
	  }
	  
	  public void setVisited(boolean state) {
	  	if(state == true)
	    		visited = true;
		else
			visited = false;
	  }

	  public boolean getVisited() {
	    return visited;
	  }
}

class Graph{
	public List<Node> vertices;
	public Graph() {
		this.vertices = new ArrayList<>();
	}
}

public class TraverseThisTown {
	public static void main(String[] args) {	
		Graph graph = new Graph();
		addNode(graph, "a");
		addNode(graph, "b");
		
		addUndirectedEdge(graph.vertices.get(0), graph.vertices.get(1));
		System.out.println(graph.vertices.get(0).neighbors.get(0).data);
		
		HashSet<Node> hash = getAllNodes(graph);
		
		createLinkedList(5);
		System.out.print(hash);
	}
	
	static void addNode(Graph graph, final String nodeVal) {
		Node temp = new Node(nodeVal);
		graph.vertices.add(temp);
	}
	
	static void addUndirectedEdge(final Node first, final Node second) {
		first.neighbors.add(second);
		second.neighbors.add(first);
	}
	
	static void removeUndirectedEdge(Graph graph, final Node first, final Node second) {
		for(int i = 0; i < first.neighbors.size(); i++) {
			if(first.neighbors.get(i).data.equals(second.data)) {
				first.neighbors.remove(i);
			}
		}
		for(int i = 0; i < second.neighbors.size(); i++) {
			if(second.neighbors.get(i).data.equals(first.data)) {
				second.neighbors.remove(i);
			}
		}
	}
	
	static HashSet<Node> getAllNodes(Graph graph){
		HashSet<Node> hash = new HashSet<Node>();
		for(int i = 0; i < graph.vertices.size(); i++) {
			hash.add(graph.vertices.get(i));
		}
		return hash;
	}
	
	static Graph createRandomUnwieghtedGraphIter(int n){
		Graph graf = new Graph();
		for(int i = 0; i < n; i++) {
			addNode(graf, Integer.toString(i));
		}
		//number of edges
		int rand = (int)(n*Math.random() + 10);
		
		for(int i = 0; i < rand; i++) {
			int rand1 = (int)(n*Math.random());
			int rand2 = (int)(n*Math.random());
			
			addUndirectedEdge(graf.vertices.get(rand1), graf.vertices.get(rand2));
			
		}
		return graf;
	}
	
	static Graph createLinkedList(int n) {
		Graph graf = new Graph();
		addNode(graf, "0");
		for(int i = 1; i < n; i++) {
			addNode(graf, Integer.toString(i));
			addUndirectedEdge(graf.vertices.get(i-1), graf.vertices.get(i));
		}
		return graf;
	}

}

class GraphSearch{
	
	static ArrayList<Node> DFSRec(final Node start, final Node end){
		for(int i = 0; i < graph.verticies.length; i++){
			graph.vertices.get(i).setVisited(false);
		}
		ArrayList<Node> path = new ArrayList<Node>();
		return DFShelper(start, end, path);
	}
	
	static ArrayList<Node> DFShelper(Node start, Node end, ArrayList<Node> path){
		path.add(start);
		start.setVisited();
		if(!start.equals(end)) 
		    for(int i = 0; i < start.neighbors.size(); i++) 
			if(!(start.neighbors.get(i).getVisited()))
			    DFSRec(start.neighbors.get(i), end);
		else 
		    return path;
	}
		
	static ArrayList<Node> DFSIter(final Node start, final Node end){
		for(int i = 0; i < graph.verticies.length; i++){
			graph.vertices.get(i).setVisited(false);
		}
		ArrayList<Node> path = new ArrayList<Node>();
		Stack<Node> s = new Stack<>();
		s.push(start);
		while(!(s.isEmpty())){
			Node temp = s.pop();
			if(temp.equals(end))
				return path;
			else {
				if(!(temp.getVisited())) {
					temp.setVisited();
					for(int i = 0; i < temp.neighbors.size(); i++) {
						s.push(temp.neighbors.get(i));
					}
				}
			}
		}
		return path;
	}
	
	static ArrayList<Node> BFSRec(final Graph graph){
		for(int i = 0; i < graph.verticies.length; i++){
			graph.vertices.get(i).setVisited(false);
		}
		ArrayList<Node> arr = new ArrayList<Node>();
		Queue<Node> q = new LinkedList<>();
		for(int i = 0; i < graph.vertices.size(); i++) {
			if(!(graph.vertices.get(i).getVisited())){
				q.add(graph.vertices.get(i));
				return BFShelper(graph, arr, q);
			}
		}
		return arr;
	}
	
	static ArrayList<Node> BFShelper(Graph graph, ArrayList<Node> arr, Queue<Node> q){
		if(q.isEmpty()) {
			return arr;
		}
		else {
			Node temp = q.poll();
			
			for(int j = 0; j < temp.neighbors.size(); j++){
				if(!(temp.neighbors.get(j).getVisited())) {
					q.add(temp.neighbors.get(j));
					temp.neighbors.get(j).setVisited();
				}
			}
		}
		return BFShelper(graph, arr, q);
	}
	
	static ArrayList<Node> BFSIter(final Graph graph){
		for(int i = 0; i < graph.verticies.length; i++){
			graph.vertices.get(i).setVisited(false);
		}
		ArrayList<Node> arr = new ArrayList<Node>();
		Queue<Node> q = new LinkedList<>();
			graph.vertices.get(0).setVisited();
			arr.add(graph.vertices.get(0));
			q.add(graph.vertices.get(0));
			while(!(q.isEmpty())) {
				Node temp = q.poll();
				for(int i = 0; i < temp.neighbors.size(); i++) {
					
					if(!(temp.neighbors.get(i).getVisited())) {
						arr.add(temp.neighbors.get(i));
						q.add(temp.neighbors.get(i));
						temp.neighbors.get(i).setVisited();
					}					
				}
			}
			return arr;
	}
}
